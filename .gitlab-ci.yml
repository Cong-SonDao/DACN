# GitLab CI/CD Pipeline for Vy Food Microservices
stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  COMPOSE_PROJECT_NAME: vyfood

# Services needed for testing
services:
  - docker:dind

before_script:
  - docker --version
  - docker-compose --version

# Test stage
test:
  stage: test
  image: node:18-alpine
  services:
    - mongo:6.0
    - redis:7-alpine
  variables:
    MONGODB_URI: mongodb://mongo:27017/test_db
    REDIS_URL: redis://redis:6379
    NODE_ENV: test
  before_script:
    - apk add --no-cache git
    - cd microservices
  script:
    # Install dependencies and run tests for each service
    - |
      for service in api-gateway user-service product-service cart-service order-service payment-service notification-service; do
        echo "Testing $service..."
        cd $service
        npm ci
        # Add test commands when available
        # npm test
        cd ..
      done
  artifacts:
    reports:
      junit: microservices/*/test-results.xml
    paths:
      - microservices/*/coverage/
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  only:
    - merge_requests
    - main
    - develop

# Build stage
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd microservices
  script:
    # Build all microservices
    - |
      for service in api-gateway user-service product-service cart-service order-service payment-service notification-service; do
        echo "Building $service..."
        cd $service
        docker build -t $CI_REGISTRY_IMAGE/$service:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE/$service:latest .
        docker push $CI_REGISTRY_IMAGE/$service:$CI_COMMIT_SHA
        docker push $CI_REGISTRY_IMAGE/$service:latest
        cd ..
      done
  only:
    - main
    - develop

# Deploy to staging
deploy_staging:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  environment:
    name: staging
    url: https://staging.vyfood.com
  variables:
    DEPLOY_ENV: staging
    MONGODB_URI: $STAGING_MONGODB_URI
    JWT_SECRET: $STAGING_JWT_SECRET
    REDIS_URL: $STAGING_REDIS_URL
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $STAGING_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Deploy to staging server
    - |
      ssh $STAGING_USER@$STAGING_HOST << 'EOF'
        cd /var/www/vyfood
        
        # Pull latest code
        git pull origin main
        
        # Update environment variables
        echo "NODE_ENV=staging" > microservices/.env
        echo "MONGODB_URI=$STAGING_MONGODB_URI" >> microservices/.env
        echo "JWT_SECRET=$STAGING_JWT_SECRET" >> microservices/.env
        echo "REDIS_URL=$STAGING_REDIS_URL" >> microservices/.env
        
        # Pull latest images
        docker-compose -f microservices/docker-compose.yml pull
        
        # Deploy with zero downtime
        docker-compose -f microservices/docker-compose.yml up -d --remove-orphans
        
        # Clean up old images
        docker system prune -af
        
        # Health check
        sleep 30
        curl -f http://localhost:3000/health || exit 1
      EOF
  only:
    - main
  when: manual

# Deploy to production
deploy_production:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  environment:
    name: production
    url: https://vyfood.com
  variables:
    DEPLOY_ENV: production
    MONGODB_URI: $PRODUCTION_MONGODB_URI
    JWT_SECRET: $PRODUCTION_JWT_SECRET
    REDIS_URL: $PRODUCTION_REDIS_URL
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PRODUCTION_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Deploy to production with blue-green strategy
    - |
      ssh $PRODUCTION_USER@$PRODUCTION_HOST << 'EOF'
        cd /var/www/vyfood
        
        # Create backup
        docker-compose -f microservices/docker-compose.yml ps > backup/containers_$(date +%Y%m%d_%H%M%S).txt
        
        # Pull latest code
        git pull origin main
        
        # Update environment variables
        echo "NODE_ENV=production" > microservices/.env
        echo "MONGODB_URI=$PRODUCTION_MONGODB_URI" >> microservices/.env
        echo "JWT_SECRET=$PRODUCTION_JWT_SECRET" >> microservices/.env
        echo "REDIS_URL=$PRODUCTION_REDIS_URL" >> microservices/.env
        
        # Pull latest images
        docker-compose -f microservices/docker-compose.yml pull
        
        # Deploy with blue-green strategy
        docker-compose -f microservices/docker-compose.yml up -d --scale api-gateway=2
        sleep 60
        
        # Health check
        for i in {1..5}; do
          if curl -f http://localhost:3000/health; then
            echo "Health check passed"
            break
          fi
          if [ $i -eq 5 ]; then
            echo "Health check failed after 5 attempts"
            # Rollback
            docker-compose -f microservices/docker-compose.yml down
            docker-compose -f microservices/docker-compose.yml up -d
            exit 1
          fi
          sleep 10
        done
        
        # Scale down old instances
        docker-compose -f microservices/docker-compose.yml up -d --scale api-gateway=1 --remove-orphans
        
        # Clean up
        docker system prune -af
        
        echo "Production deployment successful!"
      EOF
  only:
    - main
  when: manual
  allow_failure: false

# Rollback job
rollback_production:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  environment:
    name: production
    url: https://vyfood.com
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PRODUCTION_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - |
      ssh $PRODUCTION_USER@$PRODUCTION_HOST << 'EOF'
        cd /var/www/vyfood
        
        # Get previous commit
        PREVIOUS_COMMIT=$(git log --oneline -n 2 | tail -1 | cut -d' ' -f1)
        echo "Rolling back to commit: $PREVIOUS_COMMIT"
        
        # Checkout previous commit
        git checkout $PREVIOUS_COMMIT
        
        # Redeploy
        docker-compose -f microservices/docker-compose.yml down
        docker-compose -f microservices/docker-compose.yml up -d
        
        # Health check
        sleep 30
        curl -f http://localhost:3000/health || exit 1
        
        echo "Rollback completed successfully!"
      EOF
  when: manual
  only:
    - main

# Cleanup job
cleanup:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker system prune -af --volumes
    - docker builder prune -af
  when: manual
  only:
    - main
    - develop
