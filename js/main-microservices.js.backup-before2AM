// Microservices-compatible initialization
// This file handles user authentication UI and basic app initialization

document.addEventListener('DOMContentLoaded', function() {
    initializeAuthForms();
    initializeModalHandlers();
});

function initializeAuthForms() {
    console.log('Initializing auth forms...');
    
    // Login form handler
    const loginForm = document.querySelector('.login-form');
    if (loginForm) {
        console.log('Login form found, adding event listener');
        loginForm.addEventListener('submit', handleLogin);
    } else {
        console.warn('Login form not found');
    }

    // Register form handler
    const registerForm = document.querySelector('.signup-form');
    if (registerForm) {
        console.log('Register form found, adding event listener');
        registerForm.addEventListener('submit', handleRegister);
    } else {
        console.warn('Register form not found');
    }

    // Form switcher
    const loginLink = document.querySelector('.login-link');
    const signupLink = document.querySelector('.signup-link');
    
    if (loginLink) {
        loginLink.addEventListener('click', showLoginForm);
    }
    
    if (signupLink) {
        signupLink.addEventListener('click', showRegisterForm);
    }
    
    // Login/Signup buttons in header
    const loginBtn = document.querySelector('#login');
    const signupBtn = document.querySelector('#signup');
    
    if (loginBtn) {
        console.log('Login button found, adding event listener');
        loginBtn.addEventListener('click', showLoginForm);
    } else {
        console.warn('Login button not found');
    }
    
    if (signupBtn) {
        console.log('Signup button found, adding event listener');
        signupBtn.addEventListener('click', showRegisterForm);
    } else {
        console.warn('Signup button not found');
    }
}

async function handleLogin(event) {
    event.preventDefault();
    const formData = new FormData(event.target);
    const phone = formData.get('phone');
    const password = formData.get('password');

    if (!phone || !password) {
        showToast({ type: 'error', title: 'L·ªói', message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin' });
        return;
    }

    try {
        showLoading(true);
        const response = await vyFoodAPI.login(phone, password);
        
        if (response.token) {
            currentUser = response.user;
            closeModal();
            showToast({ type: 'success', title: 'Th√†nh c√¥ng', message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng' });
            
            // Update UI immediately then reload
            updateUIForLoggedInUser();
            closeModal();
            
            // Reload page to update UI (shorter delay)
            setTimeout(() => {
                location.reload();
            }, 500);
        }
    } catch (error) {
        console.error('Login error:', error);
        showToast({ type: 'error', title: 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i', message: error.message || 'Sai s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u' });
    } finally {
        showLoading(false);
    }
}

async function handleRegister(event) {
    console.log('=== handleRegister called ===');
    event.preventDefault();
    const formData = new FormData(event.target);
    
    const userData = {
        fullname: formData.get('fullname'), // API expects 'fullname' (lowercase)
        phone: formData.get('phone'),
        password: formData.get('password')
    };

    const confirmPassword = formData.get('password_confirmation'); // HTML uses 'password_confirmation'

    console.log('üìù Form data collected:');
    console.log('- Fullname:', userData.fullname);
    console.log('- Phone:', userData.phone);
    console.log('- Password length:', userData.password ? userData.password.length : 'null');
    console.log('- Confirm password:', confirmPassword);

    // Validation
    if (!userData.fullname || !userData.phone || !userData.password) {
        console.log('‚ùå Validation failed: Missing required fields');
        showToast({ type: 'error', title: 'L·ªói', message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin' });
        return;
    }

    if (userData.password !== confirmPassword) {
        console.log('‚ùå Validation failed: Password confirmation mismatch');
        showToast({ type: 'error', title: 'L·ªói', message: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp' });
        return;
    }

    if (userData.password.length < 6) {
        console.log('‚ùå Validation failed: Password too short');
        showToast({ type: 'error', title: 'L·ªói', message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±' });
        return;
    }

    console.log('‚úÖ Validation passed, calling API...');
    
    try {
        showLoading(true);
        console.log('üì° Calling vyFoodAPI.register with:', userData);
        const result = await vyFoodAPI.register(userData);
        console.log('‚úÖ Registration successful:', result);
        
        showToast({ type: 'success', title: 'Th√†nh c√¥ng', message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p' });
        showLoginForm();
    } catch (error) {
        console.error('‚ùå Register error:', error);
        console.log('Error details:', {
            message: error.message,
            status: error.status,
            response: error.response
        });
        showToast({ type: 'error', title: 'ƒêƒÉng k√Ω th·∫•t b·∫°i', message: error.message || 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω' });
    } finally {
        showLoading(false);
    }
}

function showLoginForm() {
    console.log('=== showLoginForm called ===');
    const modal = document.querySelector('.modal.signup-login');
    const modalContainer = document.querySelector('.modal-container');
    const signupForm = document.querySelector('.form-content.sign-up');
    
    console.log('Modal found:', !!modal);
    console.log('Modal container found:', !!modalContainer);
    console.log('Signup form found:', !!signupForm);
    
    if (modal && modalContainer && signupForm) {
        // FORCE CSS directly - bypass class system
        console.log('Before: modalContainer.classList =', modalContainer.className);
        modalContainer.classList.add('active');
        
        // FORCE inline style to ensure signup is hidden
        signupForm.style.marginLeft = '-50%';
        signupForm.style.transition = 'margin-left 0.3s ease';
        
        console.log('After: modalContainer.classList =', modalContainer.className);
        console.log('Forced signup marginLeft:', signupForm.style.marginLeft);
        
        // Open modal
        console.log('Before: modal.classList =', modal.className);
        modal.classList.add('open');
        console.log('After: modal.classList =', modal.className);
        
        document.body.style.overflow = "hidden";
        console.log('‚úÖ Login modal opened - FORCED LOGIN FORM with inline styles');
        
        // Debug: Check positions after forcing styles
        setTimeout(() => {
            const loginForm = document.querySelector('.form-content.login');
            if (signupForm && loginForm) {
                const signupRect = signupForm.getBoundingClientRect();
                const loginRect = loginForm.getBoundingClientRect();
                console.log('FORCED - Signup form position:', signupRect.left, signupRect.right);
                console.log('FORCED - Login form position:', loginRect.left, loginRect.right);
                
                // Check which form is actually visible
                const modalRect = modalContainer.getBoundingClientRect();
                const signupVisible = signupRect.left >= modalRect.left && signupRect.left < modalRect.right;
                const loginVisible = loginRect.left >= modalRect.left && loginRect.left < modalRect.right;
                console.log('FORCED - Signup visible:', signupVisible);
                console.log('FORCED - Login visible:', loginVisible);
            }
        }, 200);
    } else {
        console.error('‚ùå Modal, container, or signup form not found!');
    }
}

function showRegisterForm() {
    console.log('=== showRegisterForm called ===');
    const modal = document.querySelector('.modal.signup-login');
    const modalContainer = document.querySelector('.modal-container');
    const signupForm = document.querySelector('.form-content.sign-up');
    
    console.log('Modal found:', !!modal);
    console.log('Modal container found:', !!modalContainer);
    console.log('Signup form found:', !!signupForm);
    
    if (modal && modalContainer && signupForm) {
        // Show signup form (REMOVE active class and reset inline styles)
        console.log('Before: modalContainer.classList =', modalContainer.className);
        modalContainer.classList.remove('active');
        
        // RESET inline styles to show signup form
        signupForm.style.marginLeft = '0';
        signupForm.style.transition = 'margin-left 0.3s ease';
        
        console.log('After: modalContainer.classList =', modalContainer.className);
        console.log('Reset signup marginLeft:', signupForm.style.marginLeft);
        
        // Open modal
        console.log('Before: modal.classList =', modal.className);
        modal.classList.add('open');
        console.log('After: modal.classList =', modal.className);
        
        document.body.style.overflow = "hidden";
        console.log('‚úÖ Register modal opened - FORCED SIGNUP FORM with inline styles');
        
        // Debug: Check positions after resetting styles
        setTimeout(() => {
            const loginForm = document.querySelector('.form-content.login');
            if (signupForm && loginForm) {
                const signupRect = signupForm.getBoundingClientRect();
                const loginRect = loginForm.getBoundingClientRect();
                console.log('FORCED - Signup form position:', signupRect.left, signupRect.right);
                console.log('FORCED - Login form position:', loginRect.left, loginRect.right);
                
                // Check which form is actually visible
                const modalRect = modalContainer.getBoundingClientRect();
                const signupVisible = signupRect.left >= modalRect.left && signupRect.left < modalRect.right;
                const loginVisible = loginRect.left >= modalRect.left && loginRect.left < modalRect.right;
                console.log('FORCED - Signup visible:', signupVisible);
                console.log('FORCED - Login visible:', loginVisible);
            }
        }, 200);
    } else {
        console.error('‚ùå Modal, container, or signup form not found!');
    }
}

function initializeModalHandlers() {
    // Auth modal handler
    const authTriggers = document.querySelectorAll('.auth-modal-trigger');
    authTriggers.forEach(trigger => {
        trigger.addEventListener('click', function(e) {
            e.preventDefault();
            if (!vyFoodAPI.isLoggedIn()) {
                openAuthModal();
            }
        });
    });

    // Cart modal handler
    const cartTrigger = document.querySelector('.cart-trigger');
    if (cartTrigger) {
        cartTrigger.addEventListener('click', function(e) {
            e.preventDefault();
            if (!vyFoodAPI.isLoggedIn()) {
                openAuthModal();
            } else {
                openCartModal();
            }
        });
    }
}

function openAuthModal() {
    const authModal = document.querySelector('.modal.signup');
    if (authModal) {
        authModal.classList.add('open');
        document.body.style.overflow = "hidden";
    }
}

function openCartModal() {
    const cartModal = document.querySelector('.modal.cart');
    if (cartModal) {
        cartModal.classList.add('open');
        document.body.style.overflow = "hidden";
        updateCartModal();
    }
}

async function updateCartModal() {
    console.log('üé® Updating cart modal...');
    
    let cartItems = [];
    let hasUser = false;
    
    // Check for user from API or localStorage
    if (typeof api !== 'undefined' && api && api.getUserId) {
        const userId = api.getUserId();
        if (userId) {
            hasUser = true;
            console.log('üîë User ID from API:', userId);
        }
    }
    
    // Fallback to localStorage user
    if (!hasUser) {
        const currentUser = JSON.parse(localStorage.getItem('currentuser') || '{}');
        if (currentUser && currentUser.id) {
            hasUser = true;
            cartItems = currentUser.cart || [];
            console.log('üîë User from localStorage:', currentUser.fullname, 'Cart items:', cartItems.length);
        }
    }
    
    if (!hasUser) {
        console.warn('‚ö†Ô∏è No user logged in, showing empty cart');
        const cartContainer = document.querySelector('.cart-list');
        const emptyCart = document.querySelector('.gio-hang-trong');
        
        if (cartContainer) cartContainer.style.display = 'none';
        if (emptyCart) {
            emptyCart.style.display = 'flex';
            emptyCart.innerHTML = '<p>Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng</p>';
        }
        return;
    }

    try {
        console.log('üì° Calling getCart API...');
        const cartData = await api.getCart();
        console.log('üõí Raw cart response:', cartData);
        console.log('üõí Cart data type:', typeof cartData);
        
        // Cart API returns { cart: [...] }
        const cartItems = cartData && cartData.cart ? cartData.cart : [];
        console.log('üõí Extracted cart items:', cartItems);
        console.log('üõí Cart items length:', cartItems.length);
        
        const cartContainer = document.querySelector('.cart-list');
        const emptyCart = document.querySelector('.gio-hang-trong');
        
        console.log('üéØ DOM elements found:', {
            cartContainer: !!cartContainer,
            emptyCart: !!emptyCart
        });
        
        if (!cartContainer) {
            console.error('‚ùå Cart container (.cart-list) not found');
            return;
        }

        if (cartItems.length === 0) {
            console.log('üì≠ Cart is empty, showing empty state');
            cartContainer.style.display = 'none';
            if (emptyCart) {
                emptyCart.style.display = 'block';
                emptyCart.innerHTML = `
                    <div class="cart-empty">
                        <img src="./assets/img/empty-order.jpg" alt="Empty cart">
                        <p>Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng</p>
                    </div>
                `;
            }
            updateCartTotal(0);
            return;
        } else {
            console.log('üõçÔ∏è Cart has items, showing cart list');
            if (emptyCart) emptyCart.style.display = 'none';
            cartContainer.style.display = 'block';
        }

        let cartHtml = '';
        let totalAmount = 0;

        console.log('üîÑ Processing cart items for display...');
        console.log('üîë Current userId from API:', api.getUserId());
        console.log('üóÉÔ∏è Global products available:', {
            windowProducts: !!window.products,
            globalProducts: typeof products !== 'undefined',
            windowProductsLength: window.products ? window.products.length : 0,
            globalProductsLength: typeof products !== 'undefined' ? products.length : 0
        });
        
        // Get product details for each cart item
        const itemsWithProducts = await Promise.all(cartItems.map(async (item) => {
            let product = null;
            
            // Try global products array first (fastest)
            if (window.products && Array.isArray(window.products)) {
                product = window.products.find(p => p.id === item.id);
            }
            
            // Try global products variable as fallback
            if (!product && typeof products !== 'undefined' && Array.isArray(products)) {
                product = products.find(p => p.id === item.id);
            }
            
            // If still not found, try API call to get all products and filter
            if (!product) {
                try {
                    console.log(`üîç API fallback: searching for product ID ${item.id}`);
                    const response = await fetch(`http://localhost:3002/api/products?limit=100`);
                    if (response.ok) {
                        const data = await response.json();
                        const allProducts = data.products || data || [];
                        product = allProducts.find(p => p.id === item.id);
                        console.log(`üì° API search result for ${item.id}:`, product ? 'FOUND' : 'NOT FOUND');
                    }
                } catch (error) {
                    console.error(`‚ùå API fallback failed for product ${item.id}:`, error);
                }
            }
            
            console.log(`ÔøΩ Final result for product ID ${item.id}:`, product ? product.title : 'NOT FOUND');
            
            return { ...item, product };
        }));

        console.log('üì¶ Items with product details:', itemsWithProducts);

        for (const item of itemsWithProducts) {
            console.log('üì¶ Processing cart item:', item);
            
            const product = item.product;
            const productName = product ? product.title : `S·∫£n ph·∫©m #${item.id}`;
            const productPrice = product ? product.price : 50000;
            const productImage = product ? product.img : './assets/img/blank-image.png';
            
            const itemTotal = productPrice * item.soluong;
            totalAmount += itemTotal;
            
            cartHtml += `
                <div class="cart-item" data-item-id="${item.id}">
                    <div class="cart-item-info">
                        <div class="cart-item-details">
                            <h4>${productName}</h4>
                            <div class="cart-item-note">${item.note || 'Kh√¥ng c√≥ ghi ch√∫'}</div>
                            <div class="cart-item-price">${vnd(productPrice)}</div>
                        </div>
                        <div class="cart-item-total">${vnd(itemTotal)}</div>
                    </div>
                    
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div class="cart-item-quantity">
                            <button onclick="updateCartItemQuantity(${item.id}, ${item.soluong - 1})" class="quantity-btn minus">‚àí</button>
                            <span class="quantity">${item.soluong}</span>
                            <button onclick="updateCartItemQuantity(${item.id}, ${item.soluong + 1})" class="quantity-btn plus">+</button>
                        </div>
                        
                        <button onclick="removeCartItem(${item.id})" class="remove-item-btn">
                            <i class="fa-light fa-trash"></i> X√≥a
                        </button>
                    </div>
                </div>
            `;
        }

        console.log('üé® Cart HTML generated:', cartHtml);
        cartContainer.innerHTML = cartHtml;
        updateCartTotal(totalAmount);

    } catch (error) {
        console.error('Error updating cart modal:', error);
        showToast({ type: 'error', title: 'L·ªói', message: 'Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng' });
    }
}

async function updateCartItemQuantity(itemId, newQuantity) {
    if (newQuantity <= 0) {
        await removeCartItem(itemId);
        return;
    }

    try {
        console.log('üîÑ Updating cart item:', itemId, 'to quantity:', newQuantity);
        
        const userId = api.getUserId();
        console.log('üîë User ID:', userId);
        
        if (!userId) {
            showToast({ type: 'error', title: 'L·ªói', message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng' });
            return;
        }

        // Call Cart Service API to update quantity
        const updateData = { soluong: newQuantity };
        const url = `http://localhost:3003/api/cart/${userId}/items/${itemId}`;
        
        console.log('üì° Calling API:', url, 'with data:', updateData);
        
        const response = await fetch(url, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(updateData)
        });

        console.log('üì• Response status:', response.status);
        const responseData = await response.text();
        console.log('üì• Response data:', responseData);

        if (response.ok) {
            showToast({ type: 'success', title: 'Th√†nh c√¥ng', message: 'ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng' });
            await updateCartModal();
        } else {
            throw new Error(`API Error: ${response.status} - ${responseData}`);
        }
    } catch (error) {
        console.error('Error updating cart item quantity:', error);
        showToast({ type: 'error', title: 'L·ªói', message: `Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng: ${error.message}` });
    }
}

async function removeCartItem(itemId) {
    try {
        console.log('üóëÔ∏è Removing cart item:', itemId);
        
        const userId = api.getUserId();
        console.log('üîë User ID:', userId);
        
        if (!userId) {
            showToast({ type: 'error', title: 'L·ªói', message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ x√≥a s·∫£n ph·∫©m' });
            return;
        }

        // Call Cart Service API to remove item
        const url = `http://localhost:3003/api/cart/${userId}/items/${itemId}`;
        console.log('üì° Calling DELETE API:', url);
        
        const response = await fetch(url, {
            method: 'DELETE'
        });

        console.log('üì• Response status:', response.status);
        const responseData = await response.text();
        console.log('üì• Response data:', responseData);

        if (response.ok) {
            showToast({ type: 'success', title: 'Th√†nh c√¥ng', message: 'ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng' });
            await updateCartModal();
        } else {
            throw new Error(`API Error: ${response.status} - ${responseData}`);
        }
    } catch (error) {
        console.error('Error removing cart item:', error);
        showToast({ type: 'error', title: 'L·ªói', message: `Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m: ${error.message}` });
    }
}

function updateCartTotal(total) {
    const totalElements = document.querySelectorAll('.cart-total-price');
    totalElements.forEach(element => {
        element.textContent = vnd(total);
    });
}

function showLoading(show) {
    console.log('üîÑ showLoading called:', show);
    
    // Handle loading elements
    const loadingElements = document.querySelectorAll('.loading');
    loadingElements.forEach(element => {
        element.style.display = show ? 'block' : 'none';
    });

    // Handle form submit buttons (specifically auth buttons)
    const authButtons = document.querySelectorAll('#login-button, #signup-button, .form-submit');
    authButtons.forEach(button => {
        if (show) {
            // Store original text
            if (!button.hasAttribute('data-original-text')) {
                button.setAttribute('data-original-text', button.textContent);
            }
            button.disabled = true;
            button.textContent = 'ƒêang x·ª≠ l√Ω...';
            button.style.opacity = '0.7';
            button.style.cursor = 'not-allowed';
        } else {
            // Restore original text
            const originalText = button.getAttribute('data-original-text');
            if (originalText) {
                button.textContent = originalText;
            }
            button.disabled = false;
            button.style.opacity = '1';
            button.style.cursor = 'pointer';
        }
    });
    
    // Add visual loading indicator to modal if show
    const modal = document.querySelector('.modal.signup-login');
    if (modal) {
        if (show) {
            modal.style.pointerEvents = 'none';
            modal.style.opacity = '0.8';
        } else {
            modal.style.pointerEvents = 'auto';
            modal.style.opacity = '1';
        }
    }
}

// Cart management functions
function openCart() {
    showCart();
    document.querySelector('.modal-cart').classList.add('open');
    document.body.style.overflow = "hidden";
}

function closeCart() {
    document.querySelector('.modal-cart').classList.remove('open');
    document.body.style.overflow = "auto";
}

function showCart() {
    // Load and display current cart
    loadCartFromAPI();
}

function updateCartCount() {
    // Quick update cart count without full reload
    const cartCountElement = document.querySelector('.count-product-cart');
    if (cartCountElement && cart) {
        const totalItems = cart.reduce((sum, item) => sum + (item.soluong || item.quantity || 1), 0);
        cartCountElement.textContent = totalItems;
    }
}

// Utility functions for backward compatibility
function openCity(evt, city) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(city).style.display = "block";
    evt.currentTarget.className += " active";
}

// Show toast message helper
function showToast(options) {
    if (typeof toast !== 'undefined' && toast.showSuccessToast) {
        // Use the existing toast system
        switch(options.type) {
            case 'success':
                toast.showSuccessToast(options.title, options.message);
                break;
            case 'error':
                toast.showErrorToast(options.title, options.message);
                break;
            case 'warning':
                toast.showWarningToast(options.title, options.message);
                break;
            default:
                toast.showInfoToast(options.title, options.message);
        }
        } else {
        // Fallback to alert
        alert(`${options.title}: ${options.message}`);
    }
}

// Debug function - test cart directly
async function debugCart() {
    console.log('üîß DEBUG: Testing cart functionality...');
    
    const userId = api.getUserId();
    console.log('üîë User ID:', userId);
    
    if (!userId) {
        console.error('‚ùå No user logged in');
        return;
    }
    
    try {
        // Test direct API call
        const response = await fetch(`http://localhost:3003/api/cart/${userId}`);
        const cartData = await response.json();
        console.log('üõí Direct API response:', cartData);
        
        // Test through api.js
        const apiCartData = await api.getCart();
        console.log('üõí API.js response:', apiCartData);
        
        // Force update cart modal
        await updateCartModal();
        
    } catch (error) {
        console.error('‚ùå Debug error:', error);
    }
}

// Make debugCart available globally
window.debugCart = debugCart;

// Payment function
async function proceedToCheckout() {
    console.log('üõí Simple checkout process started...');
    
    try {
        // Check cart items from localStorage
        const currentUser = JSON.parse(localStorage.getItem('currentuser') || '{}');
        const cartItems = currentUser.cart || [];
        
        if (cartItems.length === 0) {
            showToast({ 
                type: 'warning', 
                title: 'Gi·ªè h√†ng tr·ªëng', 
                message: 'Vui l√≤ng th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!' 
            });
            return;
        }
        
        console.log('üì¶ Cart has', cartItems.length, 'items');
        
        // Open checkout modal
        if (typeof thanhtoanpage === 'function') {
            await thanhtoanpage(1);
            
            const checkoutModal = document.querySelector('.checkout');
            if (checkoutModal) {
                checkoutModal.classList.add('open');
                document.body.style.overflow = 'hidden';
                console.log('‚úÖ Checkout modal opened');
            }
        } else {
            // Fallback: show simple alert for now
            alert('Ch·ª©c nƒÉng thanh to√°n ƒëang ƒë∆∞·ª£c ho√†n thi·ªán. Hi·ªán t·∫°i b·∫°n c√≥ th·ªÉ xem gi·ªè h√†ng.');
        }
        
    } catch (error) {
        console.error('‚ùå Checkout error:', error);
        showToast({ 
            type: 'error', 
            title: 'L·ªói', 
            message: 'Kh√¥ng th·ªÉ m·ªü thanh to√°n: ' + error.message 
        });
    }
}

// Backup version for the original complex function
async function proceedToCheckoutOriginal() {
    try {
        console.log('üõí Starting checkout process...');
        
        // Check for user (with fallback to localStorage)
        let currentUser = null;
        let cartItems = [];
        
        // Try API first if available
        if (typeof api !== 'undefined' && api && api.getUserId) {
            try {
                const userId = api.getUserId();
                if (userId) {
                    const cartData = await api.getCart();
                    cartItems = cartData.cart || [];
                    console.log('‚úÖ Cart loaded from API:', cartItems.length);
                }
            } catch (apiError) {
                console.warn('‚ö†Ô∏è API checkout failed, falling back to localStorage:', apiError.message);
            }
        }
        
        // Fallback to localStorage
        if (cartItems.length === 0) {
            currentUser = JSON.parse(localStorage.getItem('currentuser') || '{}');
            if (currentUser && currentUser.cart) {
                cartItems = currentUser.cart;
                console.log('‚úÖ Cart loaded from localStorage:', cartItems.length);
            }
        }
        
        // Check if we have items
        if (!cartItems || cartItems.length === 0) {
            showToast({ type: 'error', title: 'Gi·ªè h√†ng tr·ªëng', message: 'Vui l√≤ng th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr∆∞·ªõc khi thanh to√°n!' });
            return;
        }

        // Get product details for price calculation from localStorage
        const products = JSON.parse(localStorage.getItem('products') || '[]');
        console.log('üì¶ Available products for pricing:', products.length);
        
        const itemsWithPrices = cartItems.map(item => {
            const product = products.find(p => p.id == item.id); // Use == for flexible comparison
            const price = product ? product.price : 50000; // Default price if not found
            
            console.log(`üí∞ Item ${item.id}: ${item.soluong}x ${price}ƒë`);
            return { ...item, price: price };
        });

        // Calculate total with real prices
        const total = itemsWithPrices.reduce((sum, item) => sum + (item.price * item.soluong), 0);
        console.log(`üíµ Total calculated: ${total.toLocaleString('vi-VN')}ƒë`);

        // Create order with required fields from checkout form
        const orderData = {
            hinhthucgiao: 'Giao t·∫≠n n∆°i', // Default delivery method
            ngaygiaohang: new Date().toISOString().split('T')[0], // Today's date
            thoigiangiao: '', // Optional
            ghichu: '', // Optional
            tenguoinhan: 'Kh√°ch h√†ng', // Default name (should get from form)
            sdtnhan: '0123456789', // Default phone (should get from form)  
            diachinhan: 'ƒê·ªãa ch·ªâ m·∫∑c ƒë·ªãnh', // Default address (should get from form)
            items: itemsWithPrices.map(item => ({
                id: item.id,
                soluong: item.soluong,
                note: item.note || 'Kh√¥ng c√≥ ghi ch√∫'
            }))
        };

        showToast({ type: 'info', title: 'ƒêang x·ª≠ l√Ω', message: 'ƒêang t·∫°o ƒë∆°n h√†ng...' });

        const token = api.getToken();
        const headers = { 'Content-Type': 'application/json' };
        if (token) {
            headers['Authorization'] = `Bearer ${token}`;
        }

        const response = await fetch('http://localhost:3000/api/orders', {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(orderData)
        });

        if (response.ok) {
            const order = await response.json();
            
            // Clear cart after successful order
            await fetch(`http://localhost:3003/api/cart/${userId}`, {
                method: 'DELETE'
            });

            showToast({ type: 'success', title: 'Th√†nh c√¥ng', message: 'ƒê·∫∑t h√†ng th√†nh c√¥ng!' });
            
            // Close cart modal and refresh
            closeCart();
            await updateCartModal();
            
        } else {
            const errorText = await response.text();
            console.error('Order creation failed:', response.status, errorText);
            throw new Error(`Failed to create order: ${response.status} - ${errorText}`);
        }

    } catch (error) {
        console.error('Error during checkout:', error);
        showToast({ type: 'error', title: 'L·ªói', message: `Kh√¥ng th·ªÉ thanh to√°n: ${error.message}` });
    }
}